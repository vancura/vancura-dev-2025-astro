---
interface Props {
    class?: string;
}

const { class: className } = Astro.props;
---

<div class:list={['code-switcher relative my-8', className]}>
    <div class="code-switcher-tabs flex justify-center"></div>

    <div
        class="code-switcher-content border-ui-border dark:border-ui-border-dark rounded-2xl border p-4 [&>.code-example>.code-switcher-content>*:last-child]:mb-0"
    >
        <slot />
    </div>
</div>

<script>
    /**
     * Manages a code switcher component that allows users to switch between various code examples using tabs. Each
     * instance operates within the context of a specified container element.
     */
    class CodeSwitcherManager {
        private tabs: HTMLElement[];
        private contents: HTMLElement[];
        private static instances: CodeSwitcherManager[] = [];

        /** Initialize the code switcher. */
        constructor(container: HTMLElement) {
            this.getContainerRect = this.getContainerRect.bind(this);
            this.handleTabClick = this.handleTabClick.bind(this);
            this.switchTab = this.switchTab.bind(this);

            this.tabs = Array.from(container.querySelectorAll('[data-tab]'));
            this.contents = Array.from(container.querySelectorAll('[data-content]'));

            const tabsContainer = container.querySelector('.code-switcher-tabs');

            if (tabsContainer) {
                this.tabs.forEach((tab) => tabsContainer.appendChild(tab));
            }

            CodeSwitcherManager.instances.push(this);

            this.tabs.forEach((tab) =>
                tab.addEventListener('click', () => this.handleTabClick(tab.textContent?.trim() || ''))
            );

            if (this.tabs.length > 0) {
                this.switchTab(0);
            }
        }

        /**
         * Handles the click event on a tab by switching to the selected tab across all instances of the tab switcher
         * and adjusting the scroll position to maintain the vertical position of the tab switcher.
         *
         * @param {string} title - The title of the tab that was clicked.
         */
        private handleTabClick(title: string): void {
            const rectBefore = this.getContainerRect();
            const switcherTopBefore = rectBefore.top;

            CodeSwitcherManager.instances.forEach((instance) => {
                const tabIndex = instance.tabs.findIndex((tab) => tab.textContent?.trim() === title);

                if (tabIndex !== -1) {
                    instance.switchTab(tabIndex);
                }
            });

            requestAnimationFrame(() => {
                const rectAfter = this.getContainerRect();
                const switcherTopAfter = rectAfter.top;
                const delta = switcherTopAfter - switcherTopBefore;

                window.scrollBy(0, delta);
            });
        }

        /**
         * Returns the bounding rectangle of the first tab element or a default rectangle with top set to 0 if no tab is
         * present.
         *
         * @returns {DOMRect} The bounding rectangle of the first tab element or a default rectangle with top set to 0.
         */
        private getContainerRect(): DOMRect {
            return this.tabs[0]?.getBoundingClientRect() || new DOMRect(0, 0, 0, 0);
        }

        /**
         * Switches the active tab to the given index.
         *
         * @param {number} index - The index of the tab to activate.
         */
        private switchTab(index: number): void {
            this.tabs.forEach((tab) => tab.classList.remove('is-active'));
            this.contents.forEach((content) => content.classList.remove('is-active'));
            this.tabs[index]?.classList.add('is-active');
            this.contents[index]?.classList.add('is-active');
        }

        /** Cleans up the current instances by resetting the instances array to an empty array. */
        public static cleanup(): void {
            this.instances = [];
        }
    }

    /** Initialize all code switchers. */
    document.querySelectorAll('.code-switcher').forEach((switcher) => new CodeSwitcherManager(switcher as HTMLElement));

    /** Cleanup code switchers when the page is reloaded. */
    document.addEventListener('astro:before-preparation', () => CodeSwitcherManager.cleanup());
</script>
